#!/bin/zsh

function start_ide() {
  nvim -S vimsession .
}

function fancy_say() {
  print -P "%F{yellow}$@%f"
}

function git_branch_default() {
  if [ ! "$GIT_BRANCH_DEFAULT" = "" ]
  then
    echo "$GIT_BRANCH_DEFAULT"
  else
    echo "development"
  fi
}

function gcd() {
  git checkout $(git_branch_default)
}

function gmd() {
  git merge $(git_branch_default)
}

function grrh() {
  git reset HEAD~${1} --hard
}

function settitle() {
  local title="$@"
  DISABLE_AUTO_TITLE="true"
  echo -e "\033]0;$title\007"
}

function downcase() {
  local var="$@"
  var=$((echo $var) | tr -c '[:alnum:] ' ' ' | tr '[:upper:]' '[:lower:]')
  var=$((echo $var) | tr -s ' ' | tr ' ' '_')
  echo $var
}

function instantfuzzy() {
  local filter="$@"
  local res=$(fzf --filter=$filter | head -n1)
  echo $res
}

function pasta() {
  $* | xsel -bi && xdotool key --clearmodifiers 'ctrl+v'
}

function cmdpasta() {
  $* | xsel -bi && xdotool key --clearmodifiers 'ctrl+shift+v'
}

function importenvfrom() {
  local filename=$1
  set -o allexport
  source "$filename"
  set +o allexport
}

function updatetime() {
  sudo ntpd -qg
}

function cdjs() {
  cd "$CODE/javascript"
}
function cdrb() {
  cd "$CODE/ruby"
}

function cdflcom() {
  cd "$CODE/javascript/blessed-books-commander"
}


function edflcom() {
  cdflcom
  nvim -S vimsession .
}

function cdkfcli() {
  cd "$CODE/javascript/kfamv-geass/packages/react-client"
}

function edkfcli() {
  cdkfcli
  start_ide
}

function cdkfsrv() {
  cd "$CODE/javascript/kfamv-geass/packages/gql-server"
}

function edkfsrv() {
  cdkfsrv
  start_ide
}

function cdkfgql() {
  cd "$CODE/javascript/kfamv-geass/packages/gql-schema"
}

function edkfgql() {
  cdkfgql
  start_ide
}

function cdccshi() {
  cd "$CODE/rust/shirei"
}

function edccshi() {
  cdccshi
  start_ide
}

function cdcchei() {
  cd "$CODE/javascript/heishi-react"
}

function edcchei() {
  cdcchei
  start_ide
}


function cdccspr() {
  cd "$CODE/rust/spacerun"
}

function edccspr() {
  cdccspr
  start_ide
}

function cdccdra() {
  cd "$CODE/rust/drang"
}

function edccdra() {
  cdccdra
  start_ide
}

function cdccstu() {
  cd "$CODE/javascript/sturm"
}

function edccstu() {
  cdccstu
  start_ide
}

function cdccrho() {
  cd "$CODE/javascript/react-hooks-pres"
}

function cdjbfro() {
  cd "$CODE/javascript/jb-next"
}

function edjbfro() {
  cdjbfro
  start_ide
}

function fbr() {
  local heads head
  heads=$(
    git for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
  );
  head=$(echo "$heads" | fzf-tmux --ansi -d $(( 2 + $(wc -l <<< "$heads") )) +m) &&
    git checkout $(echo "$head" | sed "s/ - .*$//")
}
